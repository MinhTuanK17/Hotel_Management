// <auto-generated />
using System;
using BusinessObject.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(HotelDbContext))]
    partial class HotelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.BookingDetail", b =>
                {
                    b.Property<string>("BookingReservationID")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RoomID")
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("ActualPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookingReservationID", "RoomID");

                    b.HasIndex("RoomID");

                    b.ToTable("BookingDetails");

                    b.HasData(
                        new
                        {
                            BookingReservationID = "BOOK00001",
                            RoomID = "ROOM1001",
                            ActualPrice = 875.00m,
                            EndDate = new DateTime(2024, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookingReservationID = "BOOK00002",
                            RoomID = "ROOM2002",
                            ActualPrice = 1290.00m,
                            EndDate = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            BookingReservationID = "BOOK00003",
                            RoomID = "ROOM3002",
                            ActualPrice = 1800.00m,
                            EndDate = new DateTime(2024, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BusinessObject.BookingReservation", b =>
                {
                    b.Property<string>("BookingReservationID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BookingReservationID");

                    b.HasIndex("CustomerID");

                    b.ToTable("BookingReservations", t =>
                        {
                            t.HasCheckConstraint("CK_BookingReservation_Status", "[BookingStatus] = 'Pending' OR [BookingStatus] = 'Confirmed' OR [BookingStatus] = 'Cancelled'");
                        });

                    b.HasData(
                        new
                        {
                            BookingReservationID = "BOOK00001",
                            BookingDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingStatus = "Confirmed",
                            CustomerID = 1,
                            TotalPrice = 150.50m
                        },
                        new
                        {
                            BookingReservationID = "BOOK00002",
                            BookingDate = new DateTime(2024, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingStatus = "Confirmed",
                            CustomerID = 1,
                            TotalPrice = 200.00m
                        },
                        new
                        {
                            BookingReservationID = "BOOK00003",
                            BookingDate = new DateTime(2024, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BookingStatus = "Pending",
                            CustomerID = 2,
                            TotalPrice = 250.75m
                        });
                });

            modelBuilder.Entity("BusinessObject.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<DateOnly?>("CustomerBirthday")
                        .HasColumnType("date");

                    b.Property<string>("CustomerFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers", t =>
                        {
                            t.HasCheckConstraint("CK_Customer_Status", "[CustomerStatus] = 'Active' OR [CustomerStatus] = 'Deleted'");
                        });

                    b.HasData(
                        new
                        {
                            CustomerID = 1,
                            CustomerBirthday = new DateOnly(2003, 11, 23),
                            CustomerFullName = "Nguyễn Minh Tuấn",
                            CustomerStatus = "Active",
                            EmailAddress = "tuannm.dev@gmail.com",
                            Password = "password123",
                            Telephone = "0941673660"
                        },
                        new
                        {
                            CustomerID = 2,
                            CustomerBirthday = new DateOnly(2000, 5, 20),
                            CustomerFullName = "Trần Văn A",
                            CustomerStatus = "Active",
                            EmailAddress = "vana.tran@example.com",
                            Password = "password456",
                            Telephone = "0912345678"
                        },
                        new
                        {
                            CustomerID = 3,
                            CustomerBirthday = new DateOnly(1998, 8, 15),
                            CustomerFullName = "Lê Thị B",
                            CustomerStatus = "Deleted",
                            EmailAddress = "lethib@example.com",
                            Password = "password789",
                            Telephone = "0934567890"
                        },
                        new
                        {
                            CustomerID = 4,
                            CustomerBirthday = new DateOnly(1995, 12, 5),
                            CustomerFullName = "Phạm Quốc C",
                            CustomerStatus = "Active",
                            EmailAddress = "quocc.pham@example.com",
                            Password = "password321",
                            Telephone = "0908765432"
                        });
                });

            modelBuilder.Entity("BusinessObject.RoomInformation", b =>
                {
                    b.Property<string>("RoomID")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("RoomDetailDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomMaxCapacity")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("RoomPricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RoomTypeID")
                        .HasColumnType("int");

                    b.HasKey("RoomID");

                    b.HasIndex("RoomTypeID");

                    b.ToTable("RoomInformations", t =>
                        {
                            t.HasCheckConstraint("CK_Room_Status", "[RoomStatus] = 'Active' OR [RoomStatus] = 'Rented' OR [RoomStatus] = 'Disable'");
                        });

                    b.HasData(
                        new
                        {
                            RoomID = "ROOM1001",
                            RoomDetailDescription = "A cozy single room with all basic amenities.",
                            RoomMaxCapacity = 1,
                            RoomNumber = 101,
                            RoomPricePerDay = 250.00m,
                            RoomStatus = "Rented",
                            RoomTypeID = 1
                        },
                        new
                        {
                            RoomID = "ROOM1002",
                            RoomDetailDescription = "",
                            RoomMaxCapacity = 2,
                            RoomNumber = 102,
                            RoomPricePerDay = 400.00m,
                            RoomStatus = "Active",
                            RoomTypeID = 1
                        },
                        new
                        {
                            RoomID = "ROOM1003",
                            RoomDetailDescription = "",
                            RoomMaxCapacity = 1,
                            RoomNumber = 103,
                            RoomPricePerDay = 320.00m,
                            RoomStatus = "Active",
                            RoomTypeID = 1
                        },
                        new
                        {
                            RoomID = "ROOM1004",
                            RoomDetailDescription = "",
                            RoomMaxCapacity = 5,
                            RoomNumber = 104,
                            RoomPricePerDay = 500.00m,
                            RoomStatus = "Active",
                            RoomTypeID = 1
                        },
                        new
                        {
                            RoomID = "ROOM1005",
                            RoomDetailDescription = "",
                            RoomMaxCapacity = 4,
                            RoomNumber = 105,
                            RoomPricePerDay = 470.00m,
                            RoomStatus = "Active",
                            RoomTypeID = 1
                        },
                        new
                        {
                            RoomID = "ROOM2001",
                            RoomDetailDescription = "A spacious double room with a beautiful view.",
                            RoomMaxCapacity = 3,
                            RoomNumber = 201,
                            RoomPricePerDay = 550.00m,
                            RoomStatus = "Active",
                            RoomTypeID = 2
                        },
                        new
                        {
                            RoomID = "ROOM2002",
                            RoomDetailDescription = "",
                            RoomMaxCapacity = 1,
                            RoomNumber = 202,
                            RoomPricePerDay = 250.00m,
                            RoomStatus = "Rented",
                            RoomTypeID = 2
                        },
                        new
                        {
                            RoomID = "ROOM2003",
                            RoomDetailDescription = "",
                            RoomMaxCapacity = 3,
                            RoomNumber = 203,
                            RoomPricePerDay = 385.00m,
                            RoomStatus = "Active",
                            RoomTypeID = 2
                        },
                        new
                        {
                            RoomID = "ROOM3001",
                            RoomDetailDescription = "A luxurious suite with a separate living area.",
                            RoomMaxCapacity = 4,
                            RoomNumber = 301,
                            RoomPricePerDay = 492.00m,
                            RoomStatus = "Active",
                            RoomTypeID = 3
                        },
                        new
                        {
                            RoomID = "ROOM3002",
                            RoomDetailDescription = "",
                            RoomMaxCapacity = 1,
                            RoomNumber = 302,
                            RoomPricePerDay = 200.00m,
                            RoomStatus = "Rented",
                            RoomTypeID = 3
                        },
                        new
                        {
                            RoomID = "ROOM3003",
                            RoomDetailDescription = "",
                            RoomMaxCapacity = 1,
                            RoomNumber = 303,
                            RoomPricePerDay = 180.00m,
                            RoomStatus = "Active",
                            RoomTypeID = 3
                        },
                        new
                        {
                            RoomID = "ROOM4001",
                            RoomDetailDescription = "A family room with multiple beds and a kitchenette.",
                            RoomMaxCapacity = 7,
                            RoomNumber = 401,
                            RoomPricePerDay = 700.00m,
                            RoomStatus = "Active",
                            RoomTypeID = 4
                        },
                        new
                        {
                            RoomID = "ROOM4002",
                            RoomDetailDescription = "",
                            RoomMaxCapacity = 3,
                            RoomNumber = 402,
                            RoomPricePerDay = 580.00m,
                            RoomStatus = "Active",
                            RoomTypeID = 4
                        },
                        new
                        {
                            RoomID = "ROOM4003",
                            RoomDetailDescription = "",
                            RoomMaxCapacity = 4,
                            RoomNumber = 403,
                            RoomPricePerDay = 620.00m,
                            RoomStatus = "Active",
                            RoomTypeID = 4
                        });
                });

            modelBuilder.Entity("BusinessObject.RoomType", b =>
                {
                    b.Property<int>("RoomTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomTypeID"));

                    b.Property<string>("RoomTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeNote")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomTypeID");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            RoomTypeID = 1,
                            RoomTypeName = "Single",
                            TypeDescription = "A single room with one bed.",
                            TypeNote = "Ideal for solo travelers."
                        },
                        new
                        {
                            RoomTypeID = 2,
                            RoomTypeName = "Double",
                            TypeDescription = "A double room with two beds.",
                            TypeNote = "Perfect for couples or friends."
                        },
                        new
                        {
                            RoomTypeID = 3,
                            RoomTypeName = "Suite",
                            TypeDescription = "A luxurious suite with multiple amenities.",
                            TypeNote = "Suitable for a lavish stay."
                        },
                        new
                        {
                            RoomTypeID = 4,
                            RoomTypeName = "Family",
                            TypeDescription = "A spacious room for families.",
                            TypeNote = "Comfortable for family stays."
                        });
                });

            modelBuilder.Entity("BusinessObject.BookingDetail", b =>
                {
                    b.HasOne("BusinessObject.BookingReservation", "BookingReservation")
                        .WithMany("BookingDetail")
                        .HasForeignKey("BookingReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.RoomInformation", "RoomInformation")
                        .WithMany("BookingDetail")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingReservation");

                    b.Navigation("RoomInformation");
                });

            modelBuilder.Entity("BusinessObject.BookingReservation", b =>
                {
                    b.HasOne("BusinessObject.Customer", "Customer")
                        .WithMany("BookingReservations")
                        .HasForeignKey("CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BusinessObject.RoomInformation", b =>
                {
                    b.HasOne("BusinessObject.RoomType", "RoomType")
                        .WithMany("RoomInformation")
                        .HasForeignKey("RoomTypeID");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("BusinessObject.BookingReservation", b =>
                {
                    b.Navigation("BookingDetail");
                });

            modelBuilder.Entity("BusinessObject.Customer", b =>
                {
                    b.Navigation("BookingReservations");
                });

            modelBuilder.Entity("BusinessObject.RoomInformation", b =>
                {
                    b.Navigation("BookingDetail");
                });

            modelBuilder.Entity("BusinessObject.RoomType", b =>
                {
                    b.Navigation("RoomInformation");
                });
#pragma warning restore 612, 618
        }
    }
}
